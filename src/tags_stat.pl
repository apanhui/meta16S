#!/usr/bin/perl
#-------------------------------------------------+
#    [APM] This script was generated by amp.pl    |
#    [APM] Created time: 2016-05-25 13:57:16      |
#-------------------------------------------------+
# name: tags_stat.pl
# func: stat the tags sequence file 
# version:: 0.1

use strict;
use warnings;

use File::Basename qw/basename/;
use Bio::SeqIO;
use List::Util qw(max min sum);

die qq(
Usage: perl $0 <file type> <fasta files>

Note: fasta files was paste with ','
\n) unless @ARGV == 2;

my $type = shift @ARGV;
my @files = split /,/ , shift @ARGV;

my $header = "SampleID\t$type Number\tTotal length\tMax length\tMin length\tN50\tN90\n";
print $header;

my %result;
foreach my $file (@files)
{
	&stat_fasta($file);
}

sub stat_fasta 
{
	my $file = shift ;
	
	my $fname = basename($file);
	my $sample = (split /\./,$fname)[0];

	my $seqio = Bio::SeqIO->new(-file=>$file,-format=>"fasta");
	
	my %length;
	while (my $seq = $seqio->next_seq)
	{
		my $id = $seq->id;
		my $len = $seq->length;
		
		$length{$id} = $len;
	}

	my ($num,$size,$max,$min,$n50,$n90);
	my @length = values %length;
	$num = scalar @length;
	$size = sum(@length);
	$min = min(@length);
	$max = max(@length);
	$n50 = n_size(50,@length);
	$n90 = n_size(90,@length);
	
	print "$sample\t$num\t$size\t$max\t$min\t$n50\t$n90\n";
}

sub n_size
{
	my ($percent,@length) = @_;

	my $sum = sum(@length);
	my $cut = $sum*$percent/100;

	my $tmp;
	foreach (sort {$b<=>$a} @length)
	{
		$tmp += $_;

		if ($tmp >= $cut)
		{
			return $_;
		}
	}
}
